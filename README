# Balatro 🃏

![Python](https://img.shields.io/badge/Python-3.10+-blue) ![License](https://img.shields.io/badge/License-MIT-green)

Balatro is a project designed to learn and experiment with AI in a real scenario: identifying cards. From dataset creation to real-time card recognition, Balatro provides a full workflow with modular design.
Balatro performs instance-level card identification: the AI learns to recognize each unique card individually, rather than just its type. Each card is labeled by its unique ID, and augmented variations maintain this ID for training.

---

## 🚀 Features

- Capture card screenshots and organize a dataset
- Annotate cards with proper labels
- Train an AI model to identify cards and their polychrome
- Identify cards in real-time scenarios
- Useful utility functions for automated card detection

---

## 🗂 Project Modules

- **build_dataset**  
  Capture screenshots of cards with a minimal UI and pseudo-grouping functions.

- **annotate_dataset**  
  Organize and label the dataset properly. A more advanced UI may be implemented.

- **train_model**  
  Train AI models to identify cards and recognize polychrome.

- **identify_card**  
  Functions for real-time card identification.

- **utils**  
  Helper functions, e.g., check if a specific `<card_id>` is displayed on the screen.

- **config**  
  Configuration settings and constants used throughout the project.

---

## 🛠 Installation

Make sure Python 3.10+ is installed. Then:

```bash
TODO
git clone https://github.com/yourusername/balatro.git
cd balatro
pip install -r requirements.txt
```

---

## 🎯 Usage

### 1️⃣ Build the dataset
```bash
python -m build_dataset
```

### 2️⃣ Annotate the dataset
```bash
python -m annotate_dataset
```

### 3️⃣ Train the AI
```bash
python -m train_model
```

### 4️⃣ Identify cards in real scenario
```bash
python -m identify_card
```

### 5️⃣ Use helper functions
```python
from utils import is_card_displayed

if is_card_displayed("card_123"):
    print("Card 123 is currently on screen!")
```

---

## 🔄 Workflow Diagram


                        ┌────────────────────┐
                        │   build_dataset    │
                        │  (data capture)    │
                        │  [optional UI:     │
                        │   screenshot,      │
                        │   temp grouping]   │
                        └────────┬──────────┘
                                 │
                      Screenshots / Temporary Groups
                                 │
                        ┌────────▼──────────┐
                        │ annotate_dataset  │
                        │ (organize & label │
                        │  dataset)         │
                        │  [UI: drag & drop,│
                        │   assign labels,  │
                        │   verify]         │
                        └────────┬──────────┘
                                 │
                    Labeled & Annotated Dataset (CSV, JSON, etc.)
                                 │
                        ┌────────▼──────────┐
                        │ augment_dataset   │
                        │ (data augmentation│
                        │  & synthetic      │
                        │  variations)      │
                        │  [rotate, crop,   │
                        │   brightness, etc.]│
                        └────────┬──────────┘
                                 │
                    Augmented Dataset (ready for training)
                                 │
                        ┌────────▼──────────┐
                        │   train_model     │
                        │ (train AI on      │
                        │ augmented &       │
                        │ annotated data)   │
                        └────────┬──────────┘
                                 │
                        Trained Model Files
                                 │
                        ┌────────▼──────────┐
                        │  identify_card    │
                        │ (inference /      │
                        │ real-time use)    │
                        │  [optional UI:    │
                        │   highlight cards]│
                        └────────┬──────────┘
                                 │
                 Detected Cards / Polychrome Info
                                 │
                        ┌────────▼──────────┐
                        │      utils        │
                        │ (shared helpers)  │
                        │image preprocessing│
                        │,logging, file I/O │
                        └───────────────────┘

## 📦 Handling of Data & Metadata

Balatro keeps a strict separation between **raw data**, **annotations**, **augmentations**, and **training sets**. This ensures clarity and reproducibility.

### 1. **Raw Data**
```
data/unlabeled/*.png
data/unlabeled/seen_hashes.json
```
- All collected screenshots from gameplay.  
- `seen_hashes.json` stores perceptual hashes and cluster assignments to avoid duplicates.  
- This folder is never modified after creation.

---

### 2. **Annotations**
```
annotate_dataset/labels.json
```
- Human-provided labels for each raw image.  
- Maps original filenames → card identity (`name`, `type`, `rarity`, `modifier`, …).  
- Example:
  ```json
  "cluster5_card17_id302.png": {
    "name": "Dna",
    "type": "Joker",
    "rarity": "Rare",
    "modifier": "Base",
    "cluster": 5,
    "card_group": 17
  }
  ```
- This file only covers **original images**, not augmented ones.  
- Serves as the single source of truth for manual annotations.

---

### 3. **Experiment Subsets (Optional)**
```
data/test_subset/*.png
data/test_augmented/*.png
```
- Used to experiment with augmentation and scripts.  
- Temporary, can be safely deleted or regenerated.

---

### 4. **Training Dataset (Generated)**
```
train_dataset/
├── images/        # originals + augmented
└── labels.json    # expanded labels for training
```
- Contains both original and augmented images used for training.  
- `labels.json` is generated by extending `annotate_dataset/labels.json` to include augmented files.  
  - Augmented images inherit the same label as their originals.  
  - Example:
    ```json
    "cluster5_card17_id302_aug3.png": {
      "name": "Dna",
      "type": "Joker",
      "rarity": "Rare",
      "modifier": "Base",
      "cluster": 5,
      "card_group": 17
    }
    ```
- This dataset can be fully regenerated, keeping experiments reproducible.

---

### 🔑 Key Principles
- **Raw stays raw** → `data/unlabeled` is immutable.  
- **Annotations stay clean** → `annotate_dataset/labels.json` only covers originals.  
- **Training is reproducible** → `train_dataset` can always be rebuilt from raw data + annotations + augmentations.  


## 🤝 Contributing

Open issues, submit pull requests, suggest improvements for UI and AI accuracy.

---

## 📄 License

Specify your license here (MIT, GPL, etc.).


