# augment_dataset 🎨

The `augment_dataset` module is part of the **Balatro** project.
It helps you **expand your labeled card dataset** by generating multiple synthetic variations of each card image.
This allows your AI model to **learn robust representations** even with a small number of original screenshots.

---

## 🚀 Features

* Load labeled images from the dataset (`annotate_dataset`)
* Apply a variety of augmentations:

  * Rotation
  * Cropping / resizing
  * Flipping (horizontal/vertical)
  * Brightness and contrast adjustments
  * Blur and noise
* Save augmented images with the same labeling metadata
* Configurable augmentation parameters for flexibility

---

## 🛠 Installation

Make sure you are inside the Balatro project folder and dependencies are installed:

```bash
cd balatro
pip install -r requirements.txt
```

---

## 🎯 Usage

### 1️⃣ Run the augmentation

Run the augmentation script:

```bash
python -m augment_dataset.main
```

Or with custom parameters:

```bash
python -m augment_dataset.main --input data/test_subset --n 5 --seed 42
python -m augment_dataset.main --input data/test_negative --output data/augment_negative --n 2 --seed 42
```

The script will:

1. Load all labeled images from your dataset folder
2. Apply configured augmentations to each image
3. Save the augmented images in a separate folder (or subfolder per card)
4. Maintain the original labels for each augmented image

### 2️⃣ Verify the results

```bash
python -m augment_dataset.visual_check
```

### 3️⃣ Generate the augmented labels JSON

Run the script to create `data/augmented.json` with metadata for all augmented images:

```bash
python -m augment_dataset.save_augmented_labels
```

The script will:

1. Load the original labels from `data/labels.json`
2. Scan the augmented images folder (`data/augmented/`)
3. Assign each augmented image the same metadata as its parent and add an `augmentation` field
4. Save the resulting mapping to `data/augmented.json`

This JSON will be used later in the training pipeline and can be merged in memory with the original labels for DataLoader input.

---

## 📌 Notes

* **Augmentation must be run after labeling** (`annotate_dataset`) to ensure correct card metadata.
* You can configure:

  * Number of variations per image
  * Types of augmentations applied
  * Output folder for augmented images
* Augmentation is optional, but **highly recommended** if you have few images per card
* The augmented images can then be used in `train_model` to improve AI performance

---

## 🤝 Contributing

Feel free to contribute by:

* Adding new augmentation types
* Improving augmentation efficiency
* Adding logging or progress display

Open issues or pull requests are welcome.

---

## 📄 License

Specify your license here (MIT, GPL, etc.).
